# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2020 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

default :
	$(error OpenJ9.gmk has no default target)

# spec.gmk is generated by configure and contains many of the variable definitions used in this makefile
ifeq (,$(wildcard $(SPEC)))
  $(error OpenJ9.gmk needs SPEC set to a proper spec.gmk)
endif
include $(SPEC)
include $(TOPDIR)/make/common/MakeBase.gmk

ifeq (,$(BUILD_ID))
  BUILD_ID := 000000
endif

OPENJ9_SHA := $(shell git -C $(OPENJ9_TOPDIR) rev-parse --short HEAD)
ifeq (,$(OPENJ9_SHA))
  $(error Could not determine OpenJ9 SHA)
endif

# Find OpenJ9 tag associated with current commit (suppressing stderr in case there is no such tag).
OPENJ9_TAG := $(shell git -C $(OPENJ9_TOPDIR) describe --exact-match HEAD 2>/dev/null)
ifeq (,$(OPENJ9_TAG))
  OPENJ9_BRANCH := $(shell git -C $(OPENJ9_TOPDIR) rev-parse --abbrev-ref HEAD)
  ifeq (,$(OPENJ9_BRANCH))
    $(error Could not determine OpenJ9 branch)
  endif
  OPENJ9_VERSION_STRING := $(OPENJ9_BRANCH)-$(OPENJ9_SHA)
else
  OPENJ9_VERSION_STRING := $(OPENJ9_TAG)
endif

OPENJ9OMR_SHA := $(shell git -C $(OPENJ9OMR_TOPDIR) rev-parse --short HEAD)
ifeq (,$(OPENJ9OMR_SHA))
  $(error Could not determine OMR SHA)
endif

# openjdk makeflags don't work with openj9/omr native compiles; override with number of CPUs which openj9 and omr need supplied
override MAKEFLAGS := -j $(JOBS)

# Propagate configure option '--disable-warnings-as-errors-omr' to OMR.
ifeq (false,$(WARNINGS_AS_ERRORS_OMR))
  OMR_EXTRA_CONFIGURE_ARGS := --disable-warnings-as-errors
endif

# Propagate configure option '--disable-warnings-as-errors-openj9' to OpenJ9.
ifeq (false,$(WARNINGS_AS_ERRORS_OPENJ9))
  export UMA_SUPPRESS_WARNINGS_AS_ERRORS := 1
endif

ifeq (windows,$(OPENJDK_TARGET_OS))
  # convert unix path to windows path
  FixPath = $(shell $(CYGPATH) -m $1)
  # set Visual Studio environment
  # wrap PATH in quotes as it contains spaces (unix path)
  # INCLUDE, LIB are already wrapped in quotes (windows paths)
  EXPORT_MSVS_ENV_VARS := PATH="$(PATH)" INCLUDE=$(INCLUDE) LIB=$(LIB)
  # set the output directory for shared libraries
  OPENJ9_BIN_OR_LIB_DIR := bin
else
  FixPath = $1
  EXPORT_MSVS_ENV_VARS :=
  OPENJ9_BIN_OR_LIB_DIR := lib
endif

.PHONY : \
	build-j9 \
	build-openj9-tools \
	clean-j9 \
	clean-j9-dist \
	clean-openj9-thirdparty-binaries \
	create_build_jdk \
	generate-j9jcl-sources \
	openj9_build_jdk \
	run-preprocessors-j9 \
	stage-j9 \
	#

# openj9_copy_tree
# ----------------
# $1 = The target directory to create or update.
# $2 = The source directory to copy.
openj9_copy_tree = $(call openj9_copy_tree_impl,$(strip $1),$(strip $2))

OPENJ9_MARKER_FILE := .up-to-date

# Use '-m' to update file modification times ('-m' is equivalent to '--touch' in some implementations of tar).
define openj9_copy_tree_impl
	@$(MKDIR) -p $1
	@$(TAR) --create --directory=$2 $(if $(wildcard $1/$(OPENJ9_MARKER_FILE)),--newer=$1/$(OPENJ9_MARKER_FILE)) --exclude=.git . \
		| $(TAR) --extract --directory=$1 -m
	@$(TOUCH) $1/$(OPENJ9_MARKER_FILE)
endef

openj9_build_jdk : build-j9
	+$(MAKE) -f $(TOPDIR)/closed/OpenJ9.gmk create_build_jdk

# openj9_joinall
# --------------
# yields all possible concatenations taking one word from each of up to 4 lists
# e.g. $(call openj9_joinall, A B, 1 2) = A1 A2 B1 B2
openj9_joinall = \
	$(if $(firstword $5),$(error openj9_joinall handles at most 4 lists),$(strip \
	$(if $(firstword $2),$(foreach word, $1,$(addprefix $(word), $(call openj9_joinall,$2,$3,$4))),$1)))

openj9_install_copy = $(call install-file)

define openj9_install_copy_and_sign
	$(openj9_install_copy)
	$(if $(CODESIGN),$(CODESIGN) \
		--sign "$(MACOSX_CODESIGN_IDENTITY)" \
		--timestamp \
		--options runtime \
		--entitlements $(TOPDIR)/make/data/macosxsigning/entitlements.plist \
		"$@")
endef

# openj9_install_rule
# -------------------
# $1 - suffix of install action macro (copy or copy_and_sign)
# $2 - source file path
# $3 - target file path
define openj9_install_rule
$3 : $2
	$$(openj9_install_$1)
endef

# openj9_install_files
# --------------------
# $1 - suffix of install action macro (copy or copy_and_sign; default is copy)
# $2 - sequence of file paths
openj9_install_files = \
	$(if $(word 2,$2), \
		$(eval $(call openj9_install_rule,$(if $1,$(strip $1),copy),$(word 1,$2),$(word 2,$2))) \
		$(call openj9_install_files,,$(wordlist 2,$(words $2),$2)), \
		$(eval create_build_jdk : $2) \
	)

# openj9_install_exes
# -------------------
# $1 = module name
# $2 = list of executable names without $(EXE_SUFFIX)
openj9_install_exes = \
	$(foreach file, $(addsuffix $(EXE_SUFFIX), $2), \
		$(call openj9_install_files,copy_and_sign, \
			$(addsuffix /$(file), \
				$(OUTPUTDIR)/vm \
				$(call FindExecutableDirForModule, $1) \
				$(JDK_OUTPUTDIR)/bin)))

# openj9_install_shlibs
# ---------------------
# $1 = module name
# $2 = list of shared library names without $(LIBRARY_PREFIX) or $(SHARED_LIBRARY_SUFFIX)
openj9_install_shlibs = \
	$(foreach file, $(foreach name, $2, $(call SHARED_LIBRARY,$(name))), \
		$(call openj9_install_files,copy_and_sign, \
			$(addsuffix /$(file), \
				$(OUTPUTDIR)/vm \
				$(call FindLibDirForModule, $1)/$(OPENJ9_LIBS_SUBDIR) \
				$(JDK_OUTPUTDIR)/$(OPENJ9_BIN_OR_LIB_DIR)/$(OPENJ9_LIBS_SUBDIR))))

# jitserver

ifeq (true,$(OPENJ9_ENABLE_JITSERVER))
  $(call openj9_install_exes, java.base, jitserver)
endif

# redirector

$(call openj9_install_files,copy_and_sign, \
	$(addsuffix /$(call SHARED_LIBRARY,jvm), \
		$(OUTPUTDIR)/vm/redirector \
		$(call openj9_joinall, \
			$(call FindLibDirForModule, java.base) $(JDK_OUTPUTDIR)/$(OPENJ9_BIN_OR_LIB_DIR), \
			/j9vm /server)))

# jsig

$(call openj9_install_files,copy_and_sign, \
	$(addsuffix $(call SHARED_LIBRARY,jsig), \
		$(OUTPUTDIR)/vm/ \
		$(call openj9_joinall, \
			$(call FindLibDirForModule, java.base) $(JDK_OUTPUTDIR)/$(OPENJ9_BIN_OR_LIB_DIR), \
			/ /j9vm/ /server/)))

# CPU targets without JIT support.
NO_JIT_CPUS :=

# java.base

$(call openj9_install_shlibs, java.base, \
	j9dmp29 \
	j9gc29 \
	j9gcchk29 \
	j9hookable29 \
	$(if $(filter $(NO_JIT_CPUS),$(OPENJDK_TARGET_CPU)),,j9jit29) \
	j9jnichk29 \
	j9jvm \
	j9jvmti29 \
	j9prt29 \
	j9thr29 \
	j9trc29 \
	j9vm29 \
	j9vmchk29 \
	j9vrb29 \
	j9zlib29 \
	jclse29 \
	omrsig \
	)

ifeq (windows,$(OPENJDK_TARGET_OS))
  $(call openj9_install_files,, \
	$(addsuffix /$(call STATIC_LIBRARY,jsig), \
		$(OUTPUTDIR)/vm/lib \
		$(call FindLibDirForModule, java.base) \
		$(JDK_OUTPUTDIR)/lib))

  $(call openj9_install_files,, \
	$(OUTPUTDIR)/vm/redirector/$(call STATIC_LIBRARY,redirector_jvm) \
	$(addsuffix /$(call STATIC_LIBRARY,jvm), \
		$(call FindLibDirForModule, java.base) \
		$(JDK_OUTPUTDIR)/lib))
endif # windows

$(foreach file, \
		$(notdir $(wildcard $(OUTPUTDIR)/vm/java*.properties)) \
		options.default, \
	$(call openj9_install_files,, \
		$(addsuffix /$(file), \
			$(OUTPUTDIR)/vm \
			$(call FindLibDirForModule, java.base) \
			$(JDK_OUTPUTDIR)/lib)))

ifeq (true,$(OPENJ9_ENABLE_DDR))

$(call openj9_install_files,, \
	$(addsuffix /j9ddr.dat, \
		$(OUTPUTDIR)/vm \
		$(addsuffix /$(OPENJ9_LIBS_SUBDIR), \
			$(call FindLibDirForModule, java.base) \
			$(JDK_OUTPUTDIR)/lib)))

.PHONY : run-ddrgen

$(OUTPUTDIR)/vm/j9ddr.dat : run-ddrgen

run-ddrgen :
	export CC="$(CC)" CXX="$(CXX)" $(EXPORT_MSVS_ENV_VARS) \
		&& $(MAKE) -C $(OUTPUTDIR)/vm/ddr -f run_omrddrgen.mk

endif # OPENJ9_ENABLE_DDR

$(call openj9_install_files,, \
	$(OPENJ9_TOPDIR)/longabout.html \
	$(call FindLibDirForModule, java.base)/openj9-notices.html)

# contributions to other modules
$(call openj9_install_shlibs, java.management, management management_ext)
$(call openj9_install_shlibs, openj9.cuda, cuda4j29)
$(call openj9_install_shlibs, openj9.dtfj, j9jextract)
$(call openj9_install_shlibs, openj9.sharedclasses, j9shr29)

$(foreach file, J9TraceFormat.dat OMRTraceFormat.dat, \
	$(call openj9_install_files,, \
		$(addsuffix /$(file), \
			$(OUTPUTDIR)/vm \
			$(call FindLibDirForModule, openj9.traceformat) \
			$(JDK_OUTPUTDIR)/lib)))

# openj9_test_image_rules
# -----------------------
# $1 = absolute library path
define openj9_test_image_rules
  openj9_test_image : $(TEST_IMAGE_DIR)/openj9/$(notdir $(strip $1))

  $(TEST_IMAGE_DIR)/openj9/$(notdir $(strip $1)) : $(strip $1)
	$$(openj9_install_copy_and_sign)
endef

$(foreach file, \
	$(patsubst %, $(OUTPUTDIR)/vm/%$(EXE_SUFFIX), \
		algotest \
		bcvunit \
		cfdump \
		ctest \
		dyntest \
		gc_rwlocktest \
		glaunch \
		invtest \
		jsigjnitest \
		nativevmargs \
		pltest \
		propstest \
		shrtest \
		testjep178_dynamic \
		testjep178_static \
		thrstatetest \
		vmLifecyleTests \
		vmtest \
		) \
	$(patsubst %, $(OUTPUTDIR)/vm/$(call SHARED_LIBRARY,%), \
		balloon29 \
		bcuwhite \
		bcvrelationships \
		bcvwhite \
		gptest \
		hooktests \
		j9aixbaddep \
		j9ben \
		j9lazyClassLoad \
		j9thrnumanatives29 \
		j9thrtestnatives29 \
		j9unresolved \
		j9vmtest \
		jcoregen29 \
		jlmagent29 \
		jniargtests \
		jvmtitest \
		memorywatcher29 \
		migration \
		osmemory29 \
		SharedClassesNativeAgent \
		softmxtest \
		testjvmtiA \
		testjvmtiB \
		testlibA \
		testlibB \
		vmruntimestateagent29 \
		) \
	$(patsubst %, $(OUTPUTDIR)/vm/lib%.jnilib, \
		loadLibraryTest \
		), \
	$(if $(wildcard $(file)), \
		$(eval $(call openj9_test_image_rules, $(file)))))

# Comments for stage-j9
# Currently there is a staged location where j9 is built.  This is due to a number of reasons:
# 1. make currently leaves output files in current directory
# 2. generated source and header files
# 3. repo layout compared to source.zip layout
# See issue 49 for more information and actions to correct this action.

# Functions to generate sed program fragments.
# $1 - name of flag to be enabled or disabled.
SedDisable = -e '/"$(strip $1)"/s/"true"/"false"/g'
SedEnable  = -e '/"$(strip $1)"/s/"false"/"true"/g'

# Adjust features based on our configuration.
ifeq (true,$(OPENJ9_ENABLE_CUDA))
  FEATURE_SED_SCRIPT := $(call SedEnable,opt_cuda)
else
  FEATURE_SED_SCRIPT := $(call SedDisable,opt_cuda)
endif

# Function to generate sed program fragment.
# $1 - name of make macro to use instead of a hard-coded tool reference.
# $2 - suffix of uma_make_cmd property name to be adjusted.
SedUmaCommand = -e '/<property name="uma_make_cmd_$(strip $2)"/s|value="[^"]*"|value="$($(strip $1))"|'

# Copy configured values to relevant UMA properties in .spec files.
SPEC_SED_SCRIPT := \
	$(call SedUmaCommand, CC,  cc) \
	$(call SedUmaCommand, CXX, cxx) \
	$(call SedUmaCommand, CXX, interp_gcc) \
	$(call SedUmaCommand, CXX, ppc_gcc_cxx) \
	#

# Adjust DDR enablement flags.
ifeq (true,$(OPENJ9_ENABLE_DDR))
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_useOmrDdr)
  SPEC_SED_SCRIPT    += $(call SedEnable,module_ddr)
else
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_useOmrDdr)
  SPEC_SED_SCRIPT    += $(call SedDisable,module_ddr)
endif

# Adjust JITServer enablement flags.
ifeq (true,$(OPENJ9_ENABLE_JITSERVER))
  FEATURE_SED_SCRIPT += $(call SedEnable,build_jitserver)
else
  FEATURE_SED_SCRIPT += $(call SedDisable,build_jitserver)
endif

# Disable windows rebase.
SPEC_SED_SCRIPT += $(call SedDisable,uma_windowsRebase)

# openj9_stage_buildspec_file
# ---------------------------
# $1 = The simple name of the file to copy.
define openj9_stage_buildspec_file
stage-j9 : $(OUTPUTDIR)/vm/buildspecs/$1
$(OUTPUTDIR)/vm/buildspecs/$1 : $(OPENJ9_TOPDIR)/buildspecs/$1
	@$(MKDIR) -p $$(@D)
  ifeq (.feature,$(suffix $1))
	@$(SED) $(FEATURE_SED_SCRIPT) < $$< > $$@
  else ifeq (.spec,$(suffix $1))
	@$(SED) $(SPEC_SED_SCRIPT) < $$< > $$@
  else
	@$(CP) $$< $$@
  endif
endef

$(foreach file, \
	$(notdir $(wildcard $(OPENJ9_TOPDIR)/buildspecs/*)), \
	$(eval $(call openj9_stage_buildspec_file,$(file))))

J9TOOLS_DIR := $(SUPPORT_OUTPUTDIR)/j9tools
JPP_JAR     := $(J9TOOLS_DIR)/jpp.jar

build-openj9-tools :
	@$(ECHO) Building OpenJ9 Java Preprocessor
	@$(MKDIR) -p $(J9TOOLS_DIR)
	$(MAKE) -C $(OPENJ9_TOPDIR)/sourcetools $(MAKEFLAGS) -f buildj9tools.mk \
		BOOT_JDK=$(BOOT_JDK) \
		DEST_DIR=$(call FixPath,$(J9TOOLS_DIR)) \
		JAVA_HOME=$(BOOT_JDK) \
		$(call FixPath,$(JPP_JAR))

stage-j9 :
	@$(ECHO) Staging OpenJ9 runtime in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm,$(OPENJ9_TOPDIR)/runtime)

	@$(ECHO) Staging OpenJ9 OMR in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm/omr,$(OPENJ9OMR_TOPDIR))

OPENJ9_VERSION_VARS := \
	COMPILER_VERSION_STRING \
	HOTSPOT_TARGET_OS \
	J9JDK_EXT_NAME \
	J9JDK_EXT_VERSION \
	OPENJ9_TAG \
	OPENJ9_VERSION_STRING \
	OPENJDK_SHA \
	OPENJDK_TAG \
	OPENJDK_TARGET_CPU_BITS \
	OPENJDK_TARGET_CPU_OSARCH \
	PRODUCT_NAME \
	USERNAME \
	VERSION_STRING \
	#

OPENJ9_VERSION_SCRIPT := \
	$(foreach var,$(OPENJ9_VERSION_VARS),-e 's|@$(var)@|$(value $(var))|g')

$(OUTPUTDIR)/vm/include/openj9_version_info.h : $(TOPDIR)/closed/openj9_version_info.h.in
	@$(MKDIR) -p $(@D)
	@$(SED) $(OPENJ9_VERSION_SCRIPT) > $@ < $<

# capture values for use with DependOnVariable
OPENJ9_VERSION_MAP := $(foreach var,$(sort $(OPENJ9_VERSION_VARS)),$(var)='$(value $(var))')

# update if the map changes
$(OUTPUTDIR)/vm/include/openj9_version_info.h : $(call DependOnVariable,OPENJ9_VERSION_MAP)

# Only update version files when the SHAs change.
$(OUTPUTDIR)/vm/compiler/jit.version : $(call DependOnVariable, OPENJ9_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define TR_LEVEL_NAME "$(OPENJ9_SHA)"' > $@

$(OUTPUTDIR)/vm/omr/OMR_VERSION_STRING : $(call DependOnVariable, OPENJ9OMR_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define OMR_VERSION_STRING "$(OPENJ9OMR_SHA)"' > $@

CUSTOM_COMPILER_ENV_VARS :=

ifneq (,$(OPENJ9_CC))
  CUSTOM_COMPILER_ENV_VARS += CC="$(OPENJ9_CC)"
endif
ifneq (,$(OPENJ9_CXX))
  CUSTOM_COMPILER_ENV_VARS += CXX="$(OPENJ9_CXX)"
endif
ifneq (,$(OPENJ9_DEVELOPER_DIR))
  CUSTOM_COMPILER_ENV_VARS += DEVELOPER_DIR="$(OPENJ9_DEVELOPER_DIR)"
endif
ifeq (true,$(OPENJ9_ENABLE_JITSERVER))
  ifneq (true,$(OPENJ9_ENABLE_CMAKE))
    CUSTOM_COMPILER_ENV_VARS += JITSERVER_SUPPORT=1

    ifneq (,$(OPENSSL_CFLAGS))
      CUSTOM_COMPILER_ENV_VARS += OPENSSL_CFLAGS="$(OPENSSL_CFLAGS)"
    endif

    ifneq (,$(OPENSSL_DIR))
      CUSTOM_COMPILER_ENV_VARS += OPENSSL_DIR="$(OPENSSL_DIR)"
    endif

    ifneq (,$(OPENSSL_BUNDLE_LIB_PATH))
      CUSTOM_COMPILER_ENV_VARS += OPENSSL_BUNDLE_LIB_PATH="$(OPENSSL_BUNDLE_LIB_PATH)"
    endif
  endif # OPENJ9_ENABLE_CMAKE
endif # OPENJ9_ENABLE_JITSERVER

run-preprocessors-j9 : stage-j9 \
		$(OUTPUTDIR)/vm/omr/OMR_VERSION_STRING \
		$(OUTPUTDIR)/vm/compiler/jit.version \
		$(OUTPUTDIR)/vm/include/openj9_version_info.h
	@$(ECHO) Running OpenJ9 preprocessors with OPENJ9_BUILDSPEC: $(OPENJ9_BUILDSPEC)
	export BOOT_JDK=$(BOOT_JDK) $(EXPORT_MSVS_ENV_VARS) \
		OPENJDK_VERSION_NUMBER_FOUR_POSITIONS=$(VERSION_NUMBER_FOUR_POSITIONS) \
		&& $(MAKE) -C $(OUTPUTDIR)/vm $(MAKEFLAGS) -f $(OPENJ9_TOPDIR)/runtime/buildtools.mk \
			BUILD_ID=$(BUILD_ID) \
			CMAKE=$(CMAKE) \
			DEST_DIR=$(call FixPath,$(J9TOOLS_DIR)) \
			EXTRA_CONFIGURE_ARGS=$(OMR_EXTRA_CONFIGURE_ARGS) \
			FREEMARKER_JAR="$(FREEMARKER_JAR)" \
			J9VM_SHA=$(OPENJ9_SHA) \
			JAVA_HOME=$(BOOT_JDK) \
			OMR_DIR=$(OUTPUTDIR)/vm/omr \
			SOURCETOOLS_DIR=$(call FixPath,$(OPENJ9_TOPDIR))/sourcetools \
			SPEC=$(OPENJ9_BUILDSPEC) \
			UMA_OPTIONS_EXTRA="-buildDate $(shell date +'%Y%m%d')" \
			VERSION_MAJOR=$(VERSION_FEATURE) \
			tools

build-j9 : run-preprocessors-j9
	@$(ECHO) Compiling OpenJ9 in $(OUTPUTDIR)/vm
ifeq (true,$(OPENJ9_ENABLE_CMAKE))
	export OPENJ9_BUILD=true $(EXPORT_MSVS_ENV_VARS) $(CUSTOM_COMPILER_ENV_VARS) \
		&& $(MAKE) -C $(OUTPUTDIR)/vm/build $(MAKEFLAGS) install
else
	export OPENJ9_BUILD=true $(EXPORT_MSVS_ENV_VARS) $(CUSTOM_COMPILER_ENV_VARS) \
		&& $(MAKE) -C $(OUTPUTDIR)/vm $(MAKEFLAGS) all
endif
	@$(ECHO) OpenJ9 compile complete

J9JCL_SOURCES_DONEFILE := $(MAKESUPPORT_OUTPUTDIR)/j9jcl_sources.done

recur_wildcard = $(foreach dir,$(wildcard $1/*),$(call recur_wildcard,$(dir),$2) $(filter $(subst *,%,$2),$(dir)))
AllJclSource   = $(call recur_wildcard,$(OPENJ9_TOPDIR)/jcl/src,*.java)

JPP_DEST := $(SUPPORT_OUTPUTDIR)/j9jcl_sources

$(J9JCL_SOURCES_DONEFILE) : $(AllJclSource)
	@$(ECHO) Generating J9JCL sources
	@$(BOOT_JDK)/bin/java \
		-cp "$(call FixPath,$(JPP_JAR))" \
		-Dfile.encoding=US-ASCII \
		com.ibm.jpp.commandline.CommandlineBuilder \
			-verdict \
			-baseDir "$(call FixPath,$(OPENJ9_TOPDIR))/" \
			-config JAVA$(VERSION_FEATURE) \
			-srcRoot jcl/ \
			-xml jpp_configuration.xml \
			-dest "$(call FixPath,$(JPP_DEST))" \
			-macro:define "com.ibm.oti.vm.library.version=29" \
			-tag:define "PLATFORM-$(OPENJ9_PLATFORM_CODE)"
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

generate-j9jcl-sources : $(J9JCL_SOURCES_DONEFILE)

clean-j9 : clean-openj9-thirdparty-binaries
	$(MAKE) -C $(OUTPUTDIR)/vm clean

clean-j9-dist : clean-openj9-thirdparty-binaries
	$(RM) -fdr $(OUTPUTDIR)/vm

clean-openj9-thirdparty-binaries :
	$(RM) -f $(OPENJ9_STAGED_THIRDPARTY_BINARIES) $(patsubst %.jar,%.tar.gz,$(OPENJ9_STAGED_THIRDPARTY_BINARIES))
