/*
 * ===========================================================================
 * (c) Copyright IBM Corp. 2018, 2018 All Rights Reserved
 * ===========================================================================
 * 
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  
 *
 * IBM designates this particular file as subject to the "Classpath" exception 
 * as provided by IBM in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
 * 
 * ===========================================================================
*/

Boolean FAIL = false
String SRC_REPO = 'https://github.com/${ghprbGhRepository}.git'
def BAD_FILES = [:]
def CONFIG_EXTENSIONS = [".policy", ".security", ".plist"]
def CONFIG_PATHS = ["/META-INF/", "/ChangeLog"]
def NON_JDK_PATHS = ["/solaris/", "make/", "test/", "doc/"]
def NON_JDK_EXTENSIONS = ["configure"]
def IGNORE_PATHS = ["src/bsd/doc", "src/jdk.crypto.ec/share/native/libsunec/impl", "src/linux/doc", "src/solaris/doc", "test/"]
def IGNORE_EXTENSIONS = [".gif", ".ini", ".jpg", ".ico", ".bmp", "wav", "LICENSE", "README", ".md", ".ini", "*.icu"]
String HASHES = '###################################'

timeout(time: 6, unit: 'HOURS') {
    stage('Copyright Check') {
        node ('worker') {
            timestamps {
                checkout changelog: false, poll: false,
                        scm: [$class: 'GitSCM',
                            branches: [[name: sha1]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'CloneOption',
                                            depth: 0,
                                            noTags: false,
                                            reference: '/home/jenkins/openjdk_cache',
                                            shallow: false]],
                            userRemoteConfigs: [[refspec: "+refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/* +refs/heads/${ghprbTargetBranch}:refs/remotes/origin/${ghprbTargetBranch}",
                                                    url: SRC_REPO]]]
                FILES = sh (
                    script: "git diff -C --diff-filter=ACM --name-only origin/${ghprbTargetBranch} HEAD",
                    returnStdout: true
                ).trim()
                echo FILES
                if (FILES == "") {
                    echo "There are no files to check for copyrights"
                } else {
                    DATE_YEAR = sh (
                        script: "date +%Y",
                        returnStdout: true
                    ).trim()
                    
                    // Set a different Copyright regex depending on the Repo the PR is from
                    if (ghprbGhRepository ==~ "eclipse.*") {
                        REGEX = "\'Copyright \\(c\\) ([0-9]{4}), ${DATE_YEAR}\'"
                    } else if (ghprbGhRepository ==~ "ibmruntimes.*") {
                        REGEX = "\'\\(c\\) Copyright IBM Corp. ([0-9]{4}), ${DATE_YEAR} All Rights Reserved\'"
                    } else {
                        echo "ERROR: Unrecognized repository. Unable to determine correct Copyright regex"
                        sh 'exit 1'
                    }

                    def FILES_LIST = FILES.split("\\r?\\n")
                    FILES_LIST.each() {
                        if (checkMatches("${it}", IGNORE_EXTENSIONS, IGNORE_PATHS)) {
                            println "Ignoring file: '${it}'"
                        } else {
                            println "Checking file: '${it}'"
							if (ghprbGhRepository ==~ "ibmruntimes.*") {
	                            def lineCount = 0
	                            def foundOracleCopyright = -1
	                            def foundIBMCopyright = -1
	                            def foundIBMPortionsCopyright = -1
	                            def foundGPLv2 = -1
	                            def foundCPE = -1, foundIBMCPE = -1, foundOracleCPE = -1;
	                            def foundBSDorMITCopyright = -1
	                            def foundApacheCopyright = -1
	                            def foundCopyright = -1
	                            def errorStr
	                            def foundNonIBMCopyright = false
	                            def checkCopyrightDate = true
	                            def inJDK = true
	                            
	                            def theFile = readFile "${it}"
	                            
	                            if( theFile.length() <= 0 ) {
	                                println "File is empty"
	                            } else {
	                                String[] fileLines = theFile.split("\n")
	                                toLines = fileLines.size()
	                                if (toLines>100) { toLines=100 }
	                                for (lineCount = 0; lineCount < toLines; lineCount++) {
	                                    String line = fileLines[lineCount]
	                                    if (foundIBMCopyright<0 && line.contains("Copyright IBM Corp") && line.contains("All Rights Reserved")) {
	                                        foundIBMCopyright = lineCount;
	                                        println "We have found the IBM Copyright on line '${foundIBMCopyright}' in file: '${it}'"
	                                        REGEX = "\'\\(c\\) Copyright IBM Corp. ([0-9]{4}), ${DATE_YEAR} All Rights Reserved\'"
	                                    }
	                                    if (line.contains("Portions Copyright") && line.contains("IBM Corporation")) {
	                                        foundIBMPortionsCopyright = lineCount;
	                                        println "We have found the IBM Portions Copyright on line '${foundIBMPortionsCopyright}' in file: '${it}'"
	                                        REGEX = "\'Portions Copyright ([0-9]{4}), ${DATE_YEAR} IBM Corporation.\'"
	                                    }
	                                    if (foundApacheCopyright<0 && line.contains("Licensed to the Apache Software Foundation")) {
	                                        foundApacheCopyright = lineCount;
	                                        println "We have found the ASF copyright on line '${foundApacheCopyright}' in file: '${it}'"
	                                    }
	                                    if (foundBSDorMITCopyright<0 && line.contains("BSD license") || line.contains("MIT license") || 
	                                        line.contains("Redistribution and use in source and binary forms") ||
	                                        (line.contains("PROVIDED") && line.contains("AS IS"))) {
	                                            foundBSDorMITCopyright = lineCount;
	                                            println "We have found a BSD, MIT or other Copyright on line '${foundBSDorMITCopyright}' in file: '${it}'"
	                                    }
	                                    if (line.contains("Copyright (C)") || line.contains("Copyright (c)")) {
	                                        //println "${line} found Copyright"
	                                        if (line.contains("Oracle")) {
	                                            foundOracleCopyright = lineCount;
	                                            println "We have found the Oracle copyright on line '${foundOracleCopyright}' in file: '${it}'"
	                                        } else {
	                                            if (foundIBMCopyright<0 && foundIBMPortionsCopyright<0 && foundOracleCopyright<0 && foundBSDorMITCopyright<0) {
	                                               foundCopyright = lineCount;
	                                               println "We have found a different copyright on line '${foundCopyright}' in file: '${it}'"
	                                            }
	                                        }
	                                    }
	                                    if (line.contains("\"Classpath\" exception") || line.contains("GPL Classpath Exception")) {
	                                        foundCPE = lineCount;
	                                        println "We have found a CPE on line '${foundCPE}' in file: '${it}'"
	                                        if (line.contains("IBM designates")) {
	                                            foundIBMCPE = lineCount;
	                                            println "We have found the IBM CPE on line '${foundIBMCPE}' in file: '${it}'"
	                                        } else {
	                                            if (line.contains("Oracle designates")) {
	                                                foundOracleCPE = lineCount; 
	                                                println "We have found the Oracle CPE on line '${foundOracleCPE}' in file: '${it}'"
	                                            }
	                                        }
	                                        
	                                    }
	                                    if (foundGPLv2<0 && line.contains("GNU General Public License")) {
	                                        foundGPLv2 = lineCount
	                                        println "We have found the GPL on line '${foundGPLv2}' in file: '${it}'"
	                                    }
	                                }
	                            }
	                            // Check to see if we have a non IBM Copyright and set boolean
	                            if (foundOracleCopyright>=0 || foundApacheCopyright>=0 || 
	                                foundBSDorMITCopyright>=0 || foundCopyright>=0) {
	                                println "We have found a non IBM copyright"
	                                foundNonIBMCopyright = true
	                            }
	                            
	                            // Check to see whether the file is on the built JDK
	                            if (checkMatches("${it}", NON_JDK_EXTENSIONS, NON_JDK_PATHS)) {
	                                // The file is not in the IBM/Adopt built JDK
	                                inJDK = false
	                            }
	
	                            // We have pulled the info from the file, now do all the checks
	                            if ("${it}".startsWith("closed/")) {
	                                println "The file is in the closed directory"
	                                if (foundNonIBMCopyright && foundGPLv2>0 && foundCPE>0) {
	                                    if (foundIBMCopyright>=0) {
	                                        // We have an IBM copyright, so check its location
	                                        // it should be after any existing copyright
	                                        if (foundIBMCopyright < foundOracleCopyright ||
	                                            foundIBMCopyright < foundBSDorMITCopyright ||
	                                            foundIBMCopyright < foundApacheCopyright ||
	                                            foundIBMCopyright < foundCopyright) {
	                                                //The IBM Copyright is not after the existing copyright in the file
	                                                errorStr = "IBM Copyright is not after the existing copyright"
	                                                FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                        }
	                                    } else {
	                                        errorStr = "IBM Copyright (basic) is missing from the file"
	                                        FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                        checkCopyrightDate = false
	                                    }
	                                } else {
	                                    // The file is in the 'closed' directory and doesnt contain 
	                                    // Oracle copyright with GPLv2 and Classpath Exception so should
	                                    // have IBM copyright with GPLv2 and CE at the top of the file
	                                    if (foundIBMCopyright>=3) {
	                                        errorStr = "IBM Copyright with GPLv2 and IBM Classpath Exception should be at the top of the file"
	                                        FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                    }
	                                    if (foundGPLv2<0) {
	                                        errorStr = "IBM Copyright should contain the GPLv2 license"
	                                        FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                    }
	                                    if (foundIBMCPE<0) {
	                                        errorStr = "IBM Copyright should contain the IBM Classpath Exception"
	                                        FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                    }
	                                    if (foundOracleCPE>0) {
	                                        errorStr = "IBM Copyright should NOT contain the Oracle Classpath Exception"
	                                        FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                    }
	                                }
	                            } else {
	                                println "The file is NOT in the closed directory"
	                                // We have updated the file so it should have an 
	                                // IBM copyright or an IBM Portions copyright
	                                
	                                // If we dont have some other copyright, ie Oracle, ASF, BSD, MIT etc
	                                if (!foundNonIBMCopyright) {
	                                    // and dont have a GPLv2 or CPE 
	                                    if (foundGPLv2<0) { 
	                                        if (foundCPE<0) {
	                                            println "We have no GPLv2 with CE"
	                                            // and the file is a user config
	                                            if (checkMatches("${it}", CONFIG_EXTENSIONS, CONFIG_PATHS)) {
	                                                // The file is a user configuration file so shouldnt have a copyright
	                                                println "The file is a user configuration file"
	                                                checkCopyrightDate = false
	                                                if (foundIBMCopyright>=0) {
	                                                    // if we have an IBM copyright then this is an error
	                                                    println "We have a IBM Copyright - so this is an error"
	                                                    errorStr = "IBM Copyright should NOT be used in this file as it is a user config file"
	                                                    FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                                }
	                                            } else {
	                                                // The file is not a user configuration file - should have IBM portions
	                                                println "The file is not a user configuration file"
	                                                if (foundIBMPortionsCopyright<=0) {
	                                                    errorStr = "IBM Portions Copyright should be used in this file"
	                                                    FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                                    checkCopyrightDate = false
	                                                }
	                                                // Check to see if the IBM Portions copyright is at top of file
	                                                if (foundIBMPortionsCopyright>=0) {
	                                                    // We have an IBM copyright, so check is location
	                                                    if (foundIBMPortionsCopyright > 3 ) {
	                                                        // The Portions Copyright should be at top of the file
	                                                        errorStr = "Portions Copyright is not at top of the file"
	                                                        FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                                    }
	                                                } // foundIBMPortionsCopyright
	                                            } // check user config
	                                        } // foundCPE
	                                    } // foundGPLv2
	                                } else {
	                                    // We have found some nonIBM copyright
	                                    if (foundGPLv2>=0) {
	                                        // We have found GPLv2
	                                        if (foundCPE<0) {
	                                            // We have not found Classpath Exception
	                                            if (inJDK) {
	                                                // The file is on the JDK binary
	                                                errorStr = "WE CANNOT MODIFY THIS FILE - does not contain Classpath Exception"
	                                                FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                                checkCopyrightDate = false
	                                            } else {
	                                                // The file is NOT in the JDK binary
	                                                if (foundIBMCopyright<0) {
	                                                    errorStr = "IBM Copyright (basic) is missing from the file"
	                                                    FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                                    checkCopyrightDate = false
	                                                }
	                                            }
	                                        }
	                                    } else {
	                                        // We have not found GPLv2
	                                        if (foundIBMCopyright>=0) {
	                                            // We have an IBM copyright, so check its location
	                                            // it should be after any existing copyright
	                                            if (foundIBMCopyright < foundOracleCopyright ||
	                                                foundIBMCopyright < foundBSDorMITCopyright ||
	                                                foundIBMCopyright < foundApacheCopyright ||
	                                                foundIBMCopyright < foundCopyright) {
	                                                    //The IBM Copyright is not after the existing copyright in the file
	                                                    errorStr = "IBM Copyright is not after the existing copyright"
	                                                    FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                            }
	                                        } else {
	                                            errorStr = "IBM Copyright (basic) is missing from the file"
	                                            FAIL = addError(BAD_FILES, "${it}", errorStr)
	                                            checkCopyrightDate = false
	                                        }
	                                    }
	                                } // !foundNonIBMCopyright
	                            } // if closed
							} else {
								checkCopyrightDate = true;
							}
                            // If we have found an IBM copyright or IBM Portions Copyright
                            // then we need to check that the copyright update year is the current year 
                            if (checkCopyrightDate) {
                                RESULT = sh (
                                    script: "grep -qE ${REGEX} '${it}'",
                                    returnStatus: true)
                                if(RESULT != 0) {
                                    errorStr = "IBM Copyright date appears to be incorrect"
                                    FAIL = addError(BAD_FILES, "${it}", errorStr)
                                } else {
                                    echo "Copyright date in file: appears to be correct"
                                }
                            }
                        }
                    }
                    if (FAIL) {
                        echo "${HASHES}"
                        echo "The following files were modified and have incorrect copyrights"
                        BAD_FILES.keySet().each() {
                            echo "${it}"+BAD_FILES.get("${it}")
                        }
                        echo "${HASHES}"
                        sh 'exit 1'
                    } else {
                        echo "All modified files appear to have correct copyrights"
                    }
                }
            }
        }
    }
}

def addError(errorMap, errorfile, errorStr) {
    echo errorStr
    if (errorMap.containsKey(errorfile)) {
        errorMap.put(errorfile, errorMap.get(errorfile) + ("\n\t"+errorStr))
    } else {
        errorMap.put(errorfile, "\n\t"+errorStr)
    }
    return true
}

def checkMatches(checkFile, fileExtensions, filePaths) {
    //println "checking whether '${checkFile}' matches"
    for (filePath in filePaths) {
        //println "checking if matches ${filePath}"
        if (checkFile.matches("(.*)${filePath}(.*)")) {
            //println "matched"
            return true
        }
    }
    for (fileExtension in fileExtensions) {
        //println "checking if matches ${fileExtension}"
        if (checkFile.endsWith("${fileExtension}")) {
            //println "matched"
            return true
        }
    }
    return false;
}